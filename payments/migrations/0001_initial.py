# Generated by Django 4.2.23 on 2025-07-17 22:12

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('curriculum', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('students', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BankDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acc_name', models.CharField(max_length=50)),
                ('acc_number', models.CharField(max_length=10)),
                ('bank_name', models.CharField(max_length=50, verbose_name='Bank Name')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_amount', models.DecimalField(blank=True, decimal_places=2, help_text='The original amount due for this payment (can be derived from Category Fee or manually set).', max_digits=10, null=True)),
                ('amount_received', models.DecimalField(decimal_places=2, help_text='The actual amount received in this payment transaction.', max_digits=10)),
                ('payment_date', models.DateTimeField(auto_now_add=True, help_text='The date and time the payment was recorded.')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', help_text='The current status of the payment (e.g., completed, pending).', max_length=20)),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('bank_transfer', 'Bank Transfer'), ('card', 'Card Payment'), ('online_gateway', 'Online Gateway')], help_text='The method used for the payment.', max_length=50)),
                ('transaction_id', models.CharField(blank=True, help_text='Unique ID from payment gateway or internal transaction ID.', max_length=100, null=True, unique=True)),
                ('notes', models.TextField(blank=True, help_text='Any additional notes or remarks about the payment.', null=True)),
                ('is_installment', models.BooleanField(default=False, help_text='Check if this payment is part of an installment plan.')),
                ('installment_number', models.PositiveIntegerField(blank=True, help_text='The current installment number (e.g., 1st, 2nd).', null=True)),
                ('total_installments', models.PositiveIntegerField(blank=True, help_text='The total number of installments for this payment plan.', null=True)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Fixed discount amount applied to the payment.', max_digits=10)),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Percentage discount applied to the payment (e.g., 10.00 for 10%).', max_digits=5)),
                ('balance_before_payment', models.DecimalField(blank=True, decimal_places=2, help_text='Balance remaining for this specific CategoryFee before this payment.', max_digits=10, null=True)),
                ('balance_after_payment', models.DecimalField(blank=True, decimal_places=2, help_text='Balance remaining for this specific CategoryFee after this payment.', max_digits=10, null=True)),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='PaymentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the payment category (e.g., 'Tuition Fee', 'Hostel Fee').", max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='A brief description of the payment category.', null=True)),
            ],
            options={
                'verbose_name': 'Payment Category',
                'verbose_name_plural': 'Payment Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receipt_number', models.CharField(help_text='A unique identifier for the receipt.', max_length=50, unique=True)),
                ('issue_date', models.DateTimeField(auto_now_add=True, help_text='The date and time the receipt was issued.')),
                ('generated_by', models.ForeignKey(blank=True, help_text='The staff member who generated this receipt.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('payment', models.OneToOneField(help_text='The payment associated with this receipt.', on_delete=django.db.models.deletion.CASCADE, related_name='receipt', to='payments.payment')),
            ],
            options={
                'verbose_name': 'Receipt',
                'verbose_name_plural': 'Receipts',
                'ordering': ['-issue_date'],
            },
        ),
        migrations.AddField(
            model_name='payment',
            name='payment_category',
            field=models.ForeignKey(help_text='The category of this payment (e.g., Tuition, Hostel).', on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='payments.paymentcategory'),
        ),
        migrations.AddField(
            model_name='payment',
            name='recorded_by',
            field=models.ForeignKey(blank=True, help_text='The staff member who recorded this payment.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='payment',
            name='session',
            field=models.ForeignKey(help_text='The academic session this payment is for.', on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='curriculum.session'),
        ),
        migrations.AddField(
            model_name='payment',
            name='student',
            field=models.ForeignKey(help_text='The student associated with this payment.', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='students.student'),
        ),
        migrations.AddField(
            model_name='payment',
            name='term',
            field=models.ForeignKey(help_text='The academic term this payment is for.', on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='curriculum.term'),
        ),
        migrations.CreateModel(
            name='StudentAccountLedger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.DecimalField(decimal_places=2, default=0.0, help_text='The current balance for the student in this term/session. Positive for debit, negative for credit.', max_digits=10)),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='The last time this ledger entry was updated.')),
                ('session', models.ForeignKey(help_text='The academic session for this balance.', on_delete=django.db.models.deletion.PROTECT, related_name='student_ledgers', to='curriculum.session')),
                ('student', models.ForeignKey(help_text='The student whose account balance is being tracked.', on_delete=django.db.models.deletion.CASCADE, related_name='account_ledgers', to='students.student')),
                ('term', models.ForeignKey(help_text='The academic term for this balance.', on_delete=django.db.models.deletion.PROTECT, related_name='student_ledgers', to='curriculum.term')),
            ],
            options={
                'verbose_name': 'Student Account Ledger',
                'verbose_name_plural': 'Student Account Ledgers',
                'ordering': ['student__last_name', 'session__name', 'term__name'],
                'unique_together': {('student', 'term', 'session')},
            },
        ),
        migrations.CreateModel(
            name='CategoryFee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fee_name', models.CharField(blank=True, help_text="A specific name for this fee instance (e.g., 'First Semester Tuition').", max_length=255, null=True)),
                ('amount_due', models.DecimalField(decimal_places=2, help_text='The standard amount due for this category, term, and session.', max_digits=10)),
                ('payment_category', models.ForeignKey(help_text='The payment category this fee applies to.', on_delete=django.db.models.deletion.CASCADE, related_name='fees', to='payments.paymentcategory')),
                ('session', models.ForeignKey(help_text='The academic session this fee applies to.', on_delete=django.db.models.deletion.CASCADE, related_name='category_fees', to='curriculum.session')),
                ('term', models.ForeignKey(help_text='The academic term this fee applies to.', on_delete=django.db.models.deletion.CASCADE, related_name='category_fees', to='curriculum.term')),
            ],
            options={
                'verbose_name': 'Category Fee',
                'verbose_name_plural': 'Category Fees',
                'ordering': ['session__name', 'term__name', 'payment_category__name', 'fee_name'],
                'unique_together': {('payment_category', 'term', 'session', 'fee_name')},
            },
        ),
    ]
